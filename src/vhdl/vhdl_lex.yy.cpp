#line 2 "vhdl_lex.yy.cpp"

#line 4 "vhdl_lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyvhdl_create_buffer
#define yy_delete_buffer yyvhdl_delete_buffer
#define yy_scan_buffer yyvhdl_scan_buffer
#define yy_scan_string yyvhdl_scan_string
#define yy_scan_bytes yyvhdl_scan_bytes
#define yy_init_buffer yyvhdl_init_buffer
#define yy_flush_buffer yyvhdl_flush_buffer
#define yy_load_buffer_state yyvhdl_load_buffer_state
#define yy_switch_to_buffer yyvhdl_switch_to_buffer
#define yypush_buffer_state yyvhdlpush_buffer_state
#define yypop_buffer_state yyvhdlpop_buffer_state
#define yyensure_buffer_stack yyvhdlensure_buffer_stack
#define yy_flex_debug yyvhdl_flex_debug
#define yyin yyvhdlin
#define yyleng yyvhdlleng
#define yylex yyvhdllex
#define yylineno yyvhdllineno
#define yyout yyvhdlout
#define yyrestart yyvhdlrestart
#define yytext yyvhdltext
#define yywrap yyvhdlwrap
#define yyalloc yyvhdlalloc
#define yyrealloc yyvhdlrealloc
#define yyfree yyvhdlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define yyvhdl_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yyvhdl_create_buffer
#endif

#ifdef yy_delete_buffer
#define yyvhdl_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yyvhdl_delete_buffer
#endif

#ifdef yy_scan_buffer
#define yyvhdl_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yyvhdl_scan_buffer
#endif

#ifdef yy_scan_string
#define yyvhdl_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yyvhdl_scan_string
#endif

#ifdef yy_scan_bytes
#define yyvhdl_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yyvhdl_scan_bytes
#endif

#ifdef yy_init_buffer
#define yyvhdl_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yyvhdl_init_buffer
#endif

#ifdef yy_flush_buffer
#define yyvhdl_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yyvhdl_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yyvhdl_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yyvhdl_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yyvhdl_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yyvhdl_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yyvhdlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yyvhdlpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define yyvhdlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yyvhdlpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yyvhdlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yyvhdlensure_buffer_stack
#endif

#ifdef yylex
#define yyvhdllex_ALREADY_DEFINED
#else
#define yylex yyvhdllex
#endif

#ifdef yyrestart
#define yyvhdlrestart_ALREADY_DEFINED
#else
#define yyrestart yyvhdlrestart
#endif

#ifdef yylex_init
#define yyvhdllex_init_ALREADY_DEFINED
#else
#define yylex_init yyvhdllex_init
#endif

#ifdef yylex_init_extra
#define yyvhdllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yyvhdllex_init_extra
#endif

#ifdef yylex_destroy
#define yyvhdllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yyvhdllex_destroy
#endif

#ifdef yyget_debug
#define yyvhdlget_debug_ALREADY_DEFINED
#else
#define yyget_debug yyvhdlget_debug
#endif

#ifdef yyset_debug
#define yyvhdlset_debug_ALREADY_DEFINED
#else
#define yyset_debug yyvhdlset_debug
#endif

#ifdef yyget_extra
#define yyvhdlget_extra_ALREADY_DEFINED
#else
#define yyget_extra yyvhdlget_extra
#endif

#ifdef yyset_extra
#define yyvhdlset_extra_ALREADY_DEFINED
#else
#define yyset_extra yyvhdlset_extra
#endif

#ifdef yyget_in
#define yyvhdlget_in_ALREADY_DEFINED
#else
#define yyget_in yyvhdlget_in
#endif

#ifdef yyset_in
#define yyvhdlset_in_ALREADY_DEFINED
#else
#define yyset_in yyvhdlset_in
#endif

#ifdef yyget_out
#define yyvhdlget_out_ALREADY_DEFINED
#else
#define yyget_out yyvhdlget_out
#endif

#ifdef yyset_out
#define yyvhdlset_out_ALREADY_DEFINED
#else
#define yyset_out yyvhdlset_out
#endif

#ifdef yyget_leng
#define yyvhdlget_leng_ALREADY_DEFINED
#else
#define yyget_leng yyvhdlget_leng
#endif

#ifdef yyget_text
#define yyvhdlget_text_ALREADY_DEFINED
#else
#define yyget_text yyvhdlget_text
#endif

#ifdef yyget_lineno
#define yyvhdlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yyvhdlget_lineno
#endif

#ifdef yyset_lineno
#define yyvhdlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yyvhdlset_lineno
#endif

#ifdef yywrap
#define yyvhdlwrap_ALREADY_DEFINED
#else
#define yywrap yyvhdlwrap
#endif

#ifdef yyalloc
#define yyvhdlalloc_ALREADY_DEFINED
#else
#define yyalloc yyvhdlalloc
#endif

#ifdef yyrealloc
#define yyvhdlrealloc_ALREADY_DEFINED
#else
#define yyrealloc yyvhdlrealloc
#endif

#ifdef yyfree
#define yyvhdlfree_ALREADY_DEFINED
#else
#define yyfree yyvhdlfree
#endif

#ifdef yytext
#define yyvhdltext_ALREADY_DEFINED
#else
#define yytext yyvhdltext
#endif

#ifdef yyleng
#define yyvhdlleng_ALREADY_DEFINED
#else
#define yyleng yyvhdlleng
#endif

#ifdef yyin
#define yyvhdlin_ALREADY_DEFINED
#else
#define yyin yyvhdlin
#endif

#ifdef yyout
#define yyvhdlout_ALREADY_DEFINED
#else
#define yyout yyvhdlout
#endif

#ifdef yy_flex_debug
#define yyvhdl_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug yyvhdl_flex_debug
#endif

#ifdef yylineno
#define yyvhdllineno_ALREADY_DEFINED
#else
#define yylineno yyvhdllineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[444] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  125,    1,
      117,   12,   12,  110,  117,  114,  117,  117,  117,  117,
      116,  117,  117,  117,  117,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  115,  120,  124,  119,  123,
      122,  113,    0,  114,    0,    4,    2,    6,  116,    5,
        9,    8,   11,    3,    7,   10,  114,  114,  114,  114,
      114,  114,  114,  114,    0,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   46,  114,   48,   51,  114,  114,  114,  114,

      114,  114,  114,  114,  114,   65,   66,  114,   68,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   96,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  118,  121,  112,    2,    2,
       13,  114,  114,  114,   17,   18,  114,  114,  114,  114,
        0,  111,  114,  114,  114,  114,   27,  114,  114,  114,
      114,  114,  114,   36,  114,  114,  114,   40,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       57,   58,  114,   60,  114,   62,   63,  114,  114,  114,
       70,  114,  114,  114,  114,  114,  114,  114,  114,  114,

       82,  114,  114,   85,   86,  114,  114,  114,   90,   91,
       92,   93,  114,  114,  114,  114,  114,  114,  114,  102,
      114,  114,  114,  114,  114,  114,  109,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   25,  114,   28,  114,
      114,  114,  114,  114,   34,  114,  114,   38,   39,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       56,   59,   61,   64,   67,  114,  114,   72,  114,  114,
      114,   77,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   95,  114,   98,  114,  114,  114,  114,  104,
      105,  114,  107,  108,  114,   15,   16,  114,   20,  114,

      114,   23,   24,  114,  114,  114,  114,  114,  114,   35,
      114,  114,  114,   44,  114,  114,  114,   50,   52,  114,
      114,  114,  114,  114,  114,  114,  114,   78,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  100,
      101,  114,  106,   14,  114,   21,  114,   26,  114,  114,
      114,  114,   33,   37,  114,  114,  114,  114,   47,  114,
      114,  114,  114,   69,  114,  114,  114,  114,  114,   79,
      114,   81,   83,   84,   87,  114,   89,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,   43,
       45,  114,   53,   54,   55,   71,  114,  114,   75,  114,

      114,  114,   94,  114,  114,  114,  114,  114,  114,  114,
       31,  114,   41,   42,   49,  114,  114,  114,   80,   88,
      114,  114,  103,  114,   22,   29,  114,  114,   73,   74,
       76,   97,  114,  114,  114,   32,   99,  114,  114,   19,
      114,   30,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    5,    5,    9,    5,
        5,   10,    5,    5,   11,    5,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    5,   15,
       16,   17,    5,    5,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
        8,   34,   35,   36,   37,   38,   39,   40,   41,    8,
        5,   42,    5,    5,    8,    5,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    8,   59,   60,   61,   62,   63,   64,   65,
       66,    8,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    3,    3,    3,    4,    5,    3,    3,
        3,    3,    6,    3,    3,    3,    3,    6,    6,    6,
        6,    6,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    3,    6,    6,    6,    6,    6,    6,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static const flex_int16_t yy_base[452] =
    {   0,
        0,    0,    0,    0,   64,   65,   66,   69,  172,  904,
      904,  904,  904,  904,  159,    0,    0,  140,  131,  120,
       89,   83,   58,   80,   60,   93,   78,   60,   63,   65,
      107,  109,  132,  133,   61,  157,  214,  159,  179,  255,
      174,  126,   63,  209,  197,  904,  904,  904,   85,  904,
       48,  904,   81,    0,   78,  904,   83,  904,   72,  904,
      904,  904,  904,  904,  904,  904,   63,   81,   73,  119,
      139,  210,  163,  171,   77,  189,  185,  218,  223,  206,
      248,  208,  210,  222,  244,  235,  234,  251,  256,  260,
      261,  276,    0,  262,  275,    0,  277,  292,  267,  267,

      280,  277,  290,  279,  298,    0,    0,  309,    0,  309,
      299,  317,  307,  307,  309,  313,  350,  317,  334,  326,
      355,  360,  338,  343,    0,  361,  348,  374,  365,  357,
      367,  393,  360,  369,  373,  904,  904,  904,   79,  904,
        0,  391,  398,  404,    0,    0,  398,  406,  405,  394,
       74,  904,  403,  410,  390,  410,    0,  412,  403,  416,
      417,  410,  420,    0,  417,  414,  435,    0,  440,  441,
      428,  435,  433,  438,  436,  452,  443,  450,  457,  447,
        0,    0,  460,    0,  447,    0,    0,  455,  455,  465,
        0,  461,  455,  456,  487,  471,  472,  468,  475,  488,

        0,  481,  478,    0,    0,  497,  498,  491,    0,    0,
        0,    0,  488,  496,  497,  507,  507,  495,  507,    0,
      508,  500,  506,  510,  516,  508,    0,  508,  512,  515,
      525,  516,  526,  537,  534,  541,    0,  548,    0,  540,
      547,  538,  545,  542,    0,  556,  544,    0,    0,  545,
      549,  551,  565,  553,  553,  555,  563,  575,  578,  566,
        0,    0,    0,    0,    0,  567,  589,    0,  577,  591,
      593,    0,  597,  586,  587,  603,  590,  593,  608,  595,
      612,  590,    0,  598,    0,  611,  601,  608,  621,    0,
        0,  619,    0,    0,  607,    0,    0,  607,    0,  610,

      631,    0,    0,  617,  626,  636,  645,  634,  637,    0,
      629,  646,  655,    0,  652,  655,  652,    0,    0,  645,
      656,  665,  649,  662,  655,  672,  669,    0,  670,  656,
      660,  664,  670,  674,  687,  686,  686,  687,  700,    0,
        0,  704,    0,    0,  702,    0,  690,    0,  706,  692,
      699,  700,    0,    0,  701,  698,  716,  716,    0,  721,
      700,  720,  714,    0,  724,  719,  714,  722,  724,    0,
      741,    0,    0,    0,    0,  729,    0,  747,  738,  752,
      744,  754,  741,  747,  745,  744,  759,  752,  762,    0,
        0,  757,    0,    0,    0,    0,  765,  755,    0,  769,

      758,  752,    0,  762,  764,  779,  771,  788,  777,  797,
        0,  788,    0,    0,    0,  799,  800,  802,    0,    0,
      788,  805,    0,  791,    0,    0,  793,  794,    0,    0,
        0,    0,  810,  799,  808,    0,    0,  814,  805,    0,
      808,    0,  904,  864,  870,  876,  879,  881,  887,  893,
      897
    } ;

static const flex_int16_t yy_def[452] =
    {   0,
      444,  444,  443,    3,  445,  445,  446,  446,  443,  443,
      443,  443,  443,  443,  447,  448,  449,  443,  443,  443,
      443,  443,  443,  443,  443,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  443,  443,  443,  443,  443,
      443,  443,  447,  448,  443,  443,  450,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  448,  448,  448,  448,
      448,  448,  448,  448,  451,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  443,  443,  443,  450,  443,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      451,  443,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,    0,  443,  443,  443,  443,  443,  443,  443,
      443
    } ;

static const flex_int16_t yy_nxt[971] =
    {   0,
       11,   12,   13,   12,   11,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   16,   33,   16,   16,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       16,   46,   26,   27,   28,   29,   30,   31,   32,   16,
       33,   16,   16,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   16,   48,   48,   48,   49,
       49,   48,   61,   62,   63,   65,   66,   80,  100,  152,
      130,  140,  152,   75,   59,  140,  138,   52,   82,  137,
      136,   81,  101,   84,   83,   85,   64,  141,   60,   76,

      142,   59,   80,  100,   86,  130,   77,   51,  143,   78,
       51,   67,   68,   82,   79,   69,   81,  101,   84,   83,
       85,   70,  141,   71,   76,  142,   72,   73,   74,   86,
       90,   77,   87,  143,   78,   58,   67,   68,   88,   79,
       69,   57,   91,   89,  144,   92,   70,  145,   71,   56,
       97,   72,   73,   74,   93,   90,  128,   87,   98,  146,
      129,   94,   95,   88,   99,   52,   96,   91,   89,  144,
       92,  443,  145,  443,  102,   97,  112,  443,  103,   93,
      443,  128,  443,   98,  146,  129,   94,   95,  104,   99,
      113,   96,  114,  105,  443,  115,  116,  149,  124,  102,

      117,  112,   75,  103,  443,  125,  150,  126,  443,  443,
      118,  443,  153,  104,  127,  113,  154,  114,  105,   75,
      115,  116,  149,  124,  443,  117,  131,  134,  135,  147,
      125,  150,  126,  132,  133,  118,  106,  153,  155,  127,
      158,  154,  161,  148,  107,  156,  108,  109,  162,  110,
      111,  131,  134,  135,  147,  443,  163,  157,  132,  133,
      166,  106,  167,  155,  164,  158,  443,  161,  148,  107,
      156,  108,  109,  162,  110,  111,  119,  159,  160,  165,
      120,  163,  157,  121,  168,  166,  169,  167,  122,  164,
      170,  123,  171,  172,  173,  176,  174,  443,  180,  181,

      182,  119,  159,  160,  165,  120,  175,  183,  121,  168,
      177,  169,  186,  122,  187,  170,  123,  171,  172,  173,
      176,  174,  178,  180,  181,  182,  188,  179,  184,  185,
      189,  175,  183,  190,  191,  177,  192,  186,  195,  187,
      193,  194,  196,  197,  443,  204,  443,  178,  443,  208,
      205,  188,  179,  184,  185,  189,  213,  443,  190,  191,
      443,  192,  206,  195,  214,  193,  194,  196,  197,  198,
      204,  207,  209,  199,  208,  205,  200,  211,  215,  201,
      216,  213,  202,  210,  443,  203,  220,  206,  212,  214,
      221,  217,  222,  443,  198,  225,  207,  209,  199,  218,

      226,  200,  211,  215,  201,  216,  227,  202,  210,  219,
      203,  220,  228,  212,  223,  221,  217,  222,  224,  229,
      225,  230,  231,  232,  218,  226,  233,  234,  235,  236,
      237,  227,  238,  239,  219,  240,  243,  228,  241,  223,
      244,  245,  247,  224,  229,  246,  230,  231,  232,  248,
      242,  233,  234,  235,  236,  237,  249,  238,  239,  250,
      240,  243,  251,  241,  252,  244,  245,  247,  253,  254,
      246,  255,  256,  257,  248,  242,  258,  259,  260,  261,
      262,  249,  263,  264,  250,  265,  266,  251,  267,  252,
      268,  269,  272,  253,  254,  273,  255,  256,  257,  274,

      275,  258,  259,  260,  261,  262,  270,  263,  264,  276,
      265,  266,  277,  267,  278,  268,  269,  272,  279,  280,
      273,  281,  271,  282,  274,  275,  283,  284,  285,  286,
      287,  270,  288,  289,  276,  290,  291,  277,  292,  278,
      293,  294,  295,  279,  280,  296,  281,  271,  282,  297,
      298,  283,  284,  285,  286,  287,  299,  288,  289,  300,
      290,  291,  301,  292,  302,  293,  294,  295,  303,  304,
      296,  305,  306,  307,  297,  298,  308,  309,  310,  311,
      312,  299,  313,  314,  300,  315,  316,  301,  317,  302,
      318,  319,  320,  303,  304,  321,  305,  306,  307,  322,

      323,  308,  309,  310,  311,  312,  324,  313,  314,  325,
      315,  316,  326,  317,  327,  318,  319,  320,  328,  329,
      321,  330,  331,  332,  322,  323,  333,  334,  335,  336,
      337,  324,  338,  339,  325,  340,  341,  326,  342,  327,
      343,  344,  345,  328,  329,  346,  330,  331,  332,  347,
      348,  333,  334,  335,  336,  337,  349,  338,  339,  350,
      340,  341,  351,  342,  352,  343,  344,  345,  353,  354,
      346,  355,  356,  358,  347,  348,  359,  360,  361,  362,
      357,  349,  363,  364,  350,  365,  366,  351,  369,  352,
      370,  371,  367,  353,  354,  372,  355,  356,  358,  373,

      374,  359,  360,  361,  362,  357,  368,  363,  364,  375,
      365,  366,  376,  369,  377,  370,  371,  367,  378,  379,
      372,  380,  381,  382,  373,  374,  383,  384,  385,  386,
      387,  368,  388,  389,  375,  390,  391,  376,  392,  377,
      393,  394,  395,  378,  379,  396,  380,  381,  382,  397,
      398,  383,  384,  385,  386,  387,  399,  388,  389,  400,
      390,  391,  401,  392,  402,  393,  394,  395,  403,  404,
      396,  405,  406,  407,  397,  398,  408,  409,  410,  411,
      412,  399,  413,  414,  400,  415,  416,  401,  417,  402,
      418,  419,  420,  403,  404,  421,  405,  406,  407,  422,

      423,  408,  409,  410,  411,  412,  424,  413,  414,  425,
      415,  416,  426,  417,  427,  418,  419,  420,  428,  429,
      421,  430,  431,  432,  422,  423,  433,  434,  435,  436,
      437,  424,  438,  439,  425,  440,  441,  426,  442,  427,
      443,  443,  443,  428,  429,  443,  430,  431,  432,  443,
      443,  433,  434,  435,  436,  437,  443,  438,  439,  443,
      440,  441,  443,  442,   10,   10,   10,   10,   10,   10,
       47,   47,   47,   47,   47,   47,   50,   50,   50,   50,
       50,   50,   53,  443,   53,   54,   54,   55,  443,   55,
       55,   55,   55,  139,  139,  139,  139,  139,  139,  151,

      151,  151,  151,    9,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443
    } ;

static const flex_int16_t yy_chk[971] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    6,    7,    5,
        6,    8,   23,   23,   23,   25,   25,   28,   35,  151,
       43,  139,   75,   27,   59,   57,   55,   53,   29,   51,
       49,   28,   35,   30,   29,   30,   24,   67,   22,   27,

       68,   21,   28,   35,   30,   43,   27,    7,   69,   27,
        8,   26,   26,   29,   27,   26,   28,   35,   30,   29,
       30,   26,   67,   26,   27,   68,   26,   26,   26,   30,
       32,   27,   31,   69,   27,   20,   26,   26,   31,   27,
       26,   19,   32,   31,   70,   32,   26,   70,   26,   18,
       34,   26,   26,   26,   33,   32,   42,   31,   34,   71,
       42,   33,   33,   31,   34,   15,   33,   32,   31,   70,
       32,    9,   70,    0,   36,   34,   38,    0,   36,   33,
        0,   42,    0,   34,   71,   42,   33,   33,   36,   34,
       38,   33,   38,   36,    0,   38,   39,   73,   41,   36,

       39,   38,   45,   36,    0,   41,   74,   41,    0,    0,
       39,    0,   76,   36,   41,   38,   77,   38,   36,   37,
       38,   39,   73,   41,    0,   39,   44,   45,   45,   72,
       41,   74,   41,   44,   44,   39,   37,   76,   78,   41,
       80,   77,   82,   72,   37,   79,   37,   37,   83,   37,
       37,   44,   45,   45,   72,    0,   84,   79,   44,   44,
       86,   37,   87,   78,   85,   80,    0,   82,   72,   37,
       79,   37,   37,   83,   37,   37,   40,   81,   81,   85,
       40,   84,   79,   40,   88,   86,   89,   87,   40,   85,
       90,   40,   91,   92,   94,   97,   95,    0,   99,  100,

      101,   40,   81,   81,   85,   40,   95,  102,   40,   88,
       98,   89,  104,   40,  104,   90,   40,   91,   92,   94,
       97,   95,   98,   99,  100,  101,  105,   98,  103,  103,
      108,   95,  102,  110,  111,   98,  112,  104,  114,  104,
      113,  113,  115,  116,    0,  118,    0,   98,    0,  120,
      118,  105,   98,  103,  103,  108,  123,    0,  110,  111,
        0,  112,  119,  114,  124,  113,  113,  115,  116,  117,
      118,  119,  121,  117,  120,  118,  117,  122,  126,  117,
      127,  123,  117,  121,    0,  117,  129,  119,  122,  124,
      130,  128,  131,    0,  117,  133,  119,  121,  117,  128,

      134,  117,  122,  126,  117,  127,  135,  117,  121,  128,
      117,  129,  142,  122,  132,  130,  128,  131,  132,  143,
      133,  144,  147,  148,  128,  134,  149,  150,  153,  154,
      155,  135,  156,  158,  128,  159,  161,  142,  160,  132,
      162,  163,  165,  132,  143,  163,  144,  147,  148,  166,
      160,  149,  150,  153,  154,  155,  167,  156,  158,  169,
      159,  161,  170,  160,  171,  162,  163,  165,  172,  173,
      163,  174,  175,  176,  166,  160,  177,  178,  179,  180,
      183,  167,  185,  188,  169,  189,  190,  170,  192,  171,
      193,  194,  196,  172,  173,  197,  174,  175,  176,  198,

      199,  177,  178,  179,  180,  183,  195,  185,  188,  200,
      189,  190,  202,  192,  203,  193,  194,  196,  206,  207,
      197,  208,  195,  213,  198,  199,  214,  215,  216,  217,
      218,  195,  219,  221,  200,  222,  223,  202,  224,  203,
      225,  226,  228,  206,  207,  229,  208,  195,  213,  230,
      231,  214,  215,  216,  217,  218,  232,  219,  221,  233,
      222,  223,  234,  224,  235,  225,  226,  228,  236,  238,
      229,  240,  241,  242,  230,  231,  243,  244,  246,  247,
      250,  232,  251,  252,  233,  253,  254,  234,  255,  235,
      256,  257,  258,  236,  238,  259,  240,  241,  242,  260,

      266,  243,  244,  246,  247,  250,  267,  251,  252,  269,
      253,  254,  270,  255,  271,  256,  257,  258,  273,  274,
      259,  275,  276,  277,  260,  266,  278,  279,  280,  281,
      282,  267,  284,  286,  269,  287,  288,  270,  289,  271,
      292,  295,  298,  273,  274,  300,  275,  276,  277,  301,
      304,  278,  279,  280,  281,  282,  305,  284,  286,  306,
      287,  288,  307,  289,  308,  292,  295,  298,  309,  311,
      300,  312,  313,  315,  301,  304,  316,  317,  320,  321,
      313,  305,  322,  323,  306,  324,  325,  307,  327,  308,
      329,  330,  326,  309,  311,  331,  312,  313,  315,  332,

      333,  316,  317,  320,  321,  313,  326,  322,  323,  334,
      324,  325,  335,  327,  336,  329,  330,  326,  337,  338,
      331,  339,  342,  345,  332,  333,  347,  349,  350,  351,
      352,  326,  355,  356,  334,  357,  358,  335,  360,  336,
      361,  362,  363,  337,  338,  365,  339,  342,  345,  366,
      367,  347,  349,  350,  351,  352,  368,  355,  356,  369,
      357,  358,  371,  360,  376,  361,  362,  363,  378,  379,
      365,  380,  381,  382,  366,  367,  383,  384,  385,  386,
      387,  368,  388,  389,  369,  392,  397,  371,  398,  376,
      400,  401,  402,  378,  379,  404,  380,  381,  382,  405,

      406,  383,  384,  385,  386,  387,  407,  388,  389,  408,
      392,  397,  409,  398,  410,  400,  401,  402,  412,  416,
      404,  417,  418,  421,  405,  406,  422,  424,  427,  428,
      433,  407,  434,  435,  408,  438,  439,  409,  441,  410,
        0,    0,    0,  412,  416,    0,  417,  418,  421,    0,
        0,  422,  424,  427,  428,  433,    0,  434,  435,    0,
      438,  439,    0,  441,  444,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  446,  447,    0,  447,  448,  448,  449,    0,  449,
      449,  449,  449,  450,  450,  450,  450,  450,  450,  451,

      451,  451,  451,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#line 5 "scanner.l"
#include <util/pragma_wdeprecated_register.def>
#include <util/pragma_wsign_compare.def>
#include <util/pragma_wnull_conversion.def>

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <util/dstring.h>

#define PARSER vhdl_parser
#define YYSTYPE vhdl_parsert::yystypet
#define set_loc() PARSER.set_location(yyvhdllval, yyleng)

#include "vhdl_parser.h"
#include "vhdl_y.tab.h"

void vhdl_scanner_init()
{
}

#line 1087 "vhdl_lex.yy.cpp"

#line 1089 "vhdl_lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define STRING 2
#define ESCAPED_IDENTIFIER 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 33 "scanner.l"


#line 1310 "vhdl_lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 444 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 904 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 35 "scanner.l"
{ BEGIN GRAMMAR; yyless(0); }
	YY_BREAK

case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 39 "scanner.l"
{
  // we actually collect comments!

  char *tmp=yytext+2;

  while(tmp[0]==' ' || tmp[0]=='\t')
    tmp++;

  char *tmp2=tmp;
  
  while(tmp2[0]!='\n' && tmp2[0]!=0)
    tmp2++;
  
  vhdl_parser.comments.push_back(std::string(tmp, 0, tmp2-tmp));
}                                                
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "scanner.l"
{ set_loc(); return TOK_ARROW; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "scanner.l"
{ set_loc(); return TOK_DOUBLE_STAR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "scanner.l"
{ set_loc(); return TOK_ASSIGN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "scanner.l"
{ set_loc(); return TOK_NE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "scanner.l"
{ set_loc(); return TOK_GE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "scanner.l"
{ set_loc(); return TOK_LE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "scanner.l"
{ set_loc(); return TOK_LEFT_LABEL_BRACKET; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "scanner.l"
{ set_loc(); return TOK_RIGHT_LABEL_BRACKET; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "scanner.l"
{ set_loc(); return TOK_BOX; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 65 "scanner.l"
{ /* eat */ }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "scanner.l"
{ set_loc(); return TOK_ABS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "scanner.l"
{ set_loc(); return TOK_ACCESS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "scanner.l"
{ set_loc(); return TOK_AFTER; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "scanner.l"
{ set_loc(); return TOK_ALIAS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "scanner.l"
{ set_loc(); return TOK_ALL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "scanner.l"
{ set_loc(); return TOK_AND; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "scanner.l"
{ set_loc(); return TOK_ARCHITECTURE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "scanner.l"
{ set_loc(); return TOK_ARRAY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "scanner.l"
{ set_loc(); return TOK_ASSERT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "scanner.l"
{ set_loc(); return TOK_ATTRIBUTE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "scanner.l"
{ set_loc(); return TOK_BEGIN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "scanner.l"
{ set_loc(); return TOK_BLOCK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "scanner.l"
{ set_loc(); return TOK_BODY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "scanner.l"
{ set_loc(); return TOK_BUFFER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "scanner.l"
{ set_loc(); return TOK_BUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "scanner.l"
{ set_loc(); return TOK_CASE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "scanner.l"
{ set_loc(); return TOK_COMPONENT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "scanner.l"
{ set_loc(); return TOK_CONFIGURATION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "scanner.l"
{ set_loc(); return TOK_CONSTANT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "scanner.l"
{ set_loc(); return TOK_DISCONNENT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "scanner.l"
{ set_loc(); return TOK_DOWNTO; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "scanner.l"
{ set_loc(); return TOK_ELSE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "scanner.l"
{ set_loc(); return TOK_ELSIF; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "scanner.l"
{ set_loc(); return TOK_END; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "scanner.l"
{ set_loc(); return TOK_ENTITY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "scanner.l"
{ set_loc(); return TOK_EXIT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "scanner.l"
{ set_loc(); return TOK_FILE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "scanner.l"
{ set_loc(); return TOK_FOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "scanner.l"
{ set_loc(); return TOK_FUNCTION; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "scanner.l"
{ set_loc(); return TOK_GENERATE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "scanner.l"
{ set_loc(); return TOK_GENERIC; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "scanner.l"
{ set_loc(); return TOK_GROUP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "scanner.l"
{ set_loc(); return TOK_GUARDED; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "scanner.l"
{ set_loc(); return TOK_IF; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "scanner.l"
{ set_loc(); return TOK_IMPURE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "scanner.l"
{ set_loc(); return TOK_IN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "scanner.l"
{ set_loc(); return TOK_INERTIAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "scanner.l"
{ set_loc(); return TOK_INOUT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "scanner.l"
{ set_loc(); return TOK_IS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "scanner.l"
{ set_loc(); return TOK_LABEL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "scanner.l"
{ set_loc(); return TOK_LIBRARY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "scanner.l"
{ set_loc(); return TOK_LINKAGE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "scanner.l"
{ set_loc(); return TOK_LITERAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "scanner.l"
{ set_loc(); return TOK_LOOP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "scanner.l"
{ set_loc(); return TOK_MAP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "scanner.l"
{ set_loc(); return TOK_MOD; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "scanner.l"
{ set_loc(); return TOK_NAND; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "scanner.l"
{ set_loc(); return TOK_NEW; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "scanner.l"
{ set_loc(); return TOK_NEXT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "scanner.l"
{ set_loc(); return TOK_NOR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "scanner.l"
{ set_loc(); return TOK_NOT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "scanner.l"
{ set_loc(); return TOK_NULL; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "scanner.l"
{ set_loc(); return TOK_OF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "scanner.l"
{ set_loc(); return TOK_ON; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "scanner.l"
{ set_loc(); return TOK_OPEN; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "scanner.l"
{ set_loc(); return TOK_OR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "scanner.l"
{ set_loc(); return TOK_OTHERS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "scanner.l"
{ set_loc(); return TOK_OUT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "scanner.l"
{ set_loc(); return TOK_PACKAGE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "scanner.l"
{ set_loc(); return TOK_PORT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "scanner.l"
{ set_loc(); return TOK_POSTPONED; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "scanner.l"
{ set_loc(); return TOK_PROCEDURE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "scanner.l"
{ set_loc(); return TOK_PROCESS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "scanner.l"
{ set_loc(); return TOK_PROTECTED; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "scanner.l"
{ set_loc(); return TOK_PURE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "scanner.l"
{ set_loc(); return TOK_RANGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "scanner.l"
{ set_loc(); return TOK_RECORD; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "scanner.l"
{ set_loc(); return TOK_REGISTER; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "scanner.l"
{ set_loc(); return TOK_REJECT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "scanner.l"
{ set_loc(); return TOK_REM; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "scanner.l"
{ set_loc(); return TOK_REPORT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "scanner.l"
{ set_loc(); return TOK_RETURN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "scanner.l"
{ set_loc(); return TOK_ROL; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "scanner.l"
{ set_loc(); return TOK_ROR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "scanner.l"
{ set_loc(); return TOK_SELECT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "scanner.l"
{ set_loc(); return TOK_SEVERITY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "scanner.l"
{ set_loc(); return TOK_SIGNAL; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "scanner.l"
{ set_loc(); return TOK_SLA; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "scanner.l"
{ set_loc(); return TOK_SLL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "scanner.l"
{ set_loc(); return TOK_SRA; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "scanner.l"
{ set_loc(); return TOK_SRL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "scanner.l"
{ set_loc(); return TOK_SUBTYPE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "scanner.l"
{ set_loc(); return TOK_THEN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "scanner.l"
{ set_loc(); return TOK_TO; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "scanner.l"
{ set_loc(); return TOK_TRANSPORT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "scanner.l"
{ set_loc(); return TOK_TYPE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "scanner.l"
{ set_loc(); return TOK_UNAFFECTED; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "scanner.l"
{ set_loc(); return TOK_UNITS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "scanner.l"
{ set_loc(); return TOK_UNTIL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "scanner.l"
{ set_loc(); return TOK_USE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "scanner.l"
{ set_loc(); return TOK_VARIABLE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "scanner.l"
{ set_loc(); return TOK_WAIT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "scanner.l"
{ set_loc(); return TOK_WHEN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "scanner.l"
{ set_loc(); return TOK_WHILE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "scanner.l"
{ set_loc(); return TOK_WITH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "scanner.l"
{ set_loc(); return TOK_XNOR; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "scanner.l"
{ set_loc(); return TOK_XOR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 165 "scanner.l"
{ 
  set_loc();
  PARSER.scanner_buffer.clear();
  BEGIN(STRING);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "scanner.l"
{
  set_loc();
  yyvhdllval.text=yytext;
  return TOK_BIT_STRING;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "scanner.l"
{ 
  set_loc();
  yyvhdllval.text=std::string(yytext, 1, 1);
  return TOK_CHAR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 183 "scanner.l"
{
  set_loc();
  yyvhdllval.text=yytext;
  return TOK_BASED_INTEGER;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 189 "scanner.l"
{
  set_loc();
  yyvhdllval.text=yytext;
  return TOK_IDENTIFIER;
} 
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 195 "scanner.l"
{ 
  BEGIN(ESCAPED_IDENTIFIER);
  set_loc();
  PARSER.scanner_buffer.clear();
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 201 "scanner.l"
{ 
  set_loc();
  yyvhdllval.text=yytext;
  return TOK_NATURAL;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 207 "scanner.l"
{ set_loc(); return yytext[0]; }
	YY_BREAK
// end of <GRAMMAR>

case 118:
YY_RULE_SETUP
#line 212 "scanner.l"
{
  // escaped double quote
  PARSER.scanner_buffer+='\\';
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 216 "scanner.l"
{
  // end of string
  yyvhdllval.text=PARSER.scanner_buffer;
  BEGIN(GRAMMAR);
  return TOK_STRING;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 222 "scanner.l"
{ PARSER.scanner_buffer+=yytext[0]; }
	YY_BREAK


case 121:
YY_RULE_SETUP
#line 226 "scanner.l"
{
  // escaped backslash
  PARSER.scanner_buffer+='\\';
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 230 "scanner.l"
{ 
  // end of escaped identifier
  PARSER.scanner_buffer+='\\';
  yyvhdllval.text=PARSER.scanner_buffer;
  BEGIN(GRAMMAR);
  return TOK_IDENTIFIER;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 237 "scanner.l"
{ PARSER.scanner_buffer+=yytext[0]; }
	YY_BREAK
// end of <ESCAPED_IDENTIFIER>
case 124:
YY_RULE_SETUP
#line 240 "scanner.l"
ECHO;
	YY_BREAK
#line 2055 "vhdl_lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(ESCAPED_IDENTIFIER):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 444 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 444 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 443);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 240 "scanner.l"


int yywrap() { return 1; }


